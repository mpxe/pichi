// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "mainwindow.h"
#include "../pichi.h"

void MainWindow::cb_button_start_i(Fl_Light_Button*, void*) {
  button_start_clicked();
}
void MainWindow::cb_button_start(Fl_Light_Button* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->user_data()))->cb_button_start_i(o,v);
}

Fl_Menu_Item MainWindow::menu_choice_mode[] = {
 {"Transmit", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Receive", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Log", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Display", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Debug", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MainWindow::cb_button_sync_time_i(Fl_Button*, void*) {
  button_sync_time_clicked();
}
void MainWindow::cb_button_sync_time(Fl_Button* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->parent()->user_data()))->cb_button_sync_time_i(o,v);
}

void MainWindow::cb_radio_log_all_i(Fl_Round_Button*, void*) {
  radio_log_clicked();
}
void MainWindow::cb_radio_log_all(Fl_Round_Button* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->parent()->user_data()))->cb_radio_log_all_i(o,v);
}

void MainWindow::cb_radio_log_short_i(Fl_Round_Button*, void*) {
  radio_log_clicked();
}
void MainWindow::cb_radio_log_short(Fl_Round_Button* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->parent()->user_data()))->cb_radio_log_short_i(o,v);
}

void MainWindow::cb_button_apply_i(Fl_Button*, void*) {
  button_apply_clicked();
}
void MainWindow::cb_button_apply(Fl_Button* o, void* v) {
  ((MainWindow*)(o->parent()->parent()->user_data()))->cb_button_apply_i(o,v);
}

MainWindow::MainWindow(Pichi* p) {
  pichi_ = p;
  last_count_ = 0;
  { main_window = new Fl_Double_Window(500, 300, "Pichi");
    main_window->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(0, 0, 500, 38);
      { button_start = new Fl_Light_Button(122, 6, 60, 26, "Start");
        button_start->selection_color((Fl_Color)62);
        button_start->callback((Fl_Callback*)cb_button_start);
      } // Fl_Light_Button* button_start
      { choice_mode = new Fl_Choice(6, 6, 110, 26);
        choice_mode->down_box(FL_BORDER_BOX);
        choice_mode->labeltype(FL_NO_LABEL);
        choice_mode->menu(menu_choice_mode);
      } // Fl_Choice* choice_mode
      { text_rate = new Fl_Output(254, 6, 60, 26, "Rate (Hz)");
        text_rate->box(FL_FLAT_BOX);
        text_rate->textfont(13);
      } // Fl_Output* text_rate
      { text_total = new Fl_Output(358, 6, 136, 24, "Total");
        text_total->box(FL_FLAT_BOX);
        text_total->textfont(13);
      } // Fl_Output* text_total
      o->end();
    } // Fl_Group* o
    { Fl_Tabs* o = new Fl_Tabs(6, 38, 488, 224);
      { Fl_Group* o = new Fl_Group(6, 60, 488, 202, "Device");
        o->hide();
        { text_device_id = new Fl_Input(12, 66, 160, 24, "Device ID");
          text_device_id->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Input* text_device_id
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(6, 60, 488, 202, "Time");
        o->hide();
        { button_sync_time = new Fl_Button(12, 66, 90, 26, "Sync Time");
          button_sync_time->callback((Fl_Callback*)cb_button_sync_time);
        } // Fl_Button* button_sync_time
        { Fl_Box* o = new Fl_Box(106, 66, 382, 26, "Synchronize time via NTP");
          o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(6, 60, 488, 202, "GNSS");
        { text_gnss_port = new Fl_Input(12, 66, 160, 24, "Port (Device sending NMEA sentences)");
          text_gnss_port->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Input* text_gnss_port
        { text_gnss_port_rate = new Fl_Input(12, 96, 160, 24, "Baud Rate");
          text_gnss_port_rate->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Input* text_gnss_port_rate
        { Fl_Box* o = new Fl_Box(12, 142, 474, 98, "NMEA sentence filter");
          o->box(FL_DOWN_BOX);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Box* o
        { check_rmc = new Fl_Check_Button(18, 150, 460, 16, "RMC (Recommended minimum data)");
          check_rmc->down_box(FL_DOWN_BOX);
          check_rmc->value(1);
        } // Fl_Check_Button* check_rmc
        { check_gga = new Fl_Check_Button(18, 172, 460, 16, "GGA (Global positioning system fix data)");
          check_gga->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* check_gga
        { check_gsv = new Fl_Check_Button(18, 194, 460, 16, "GSV (Satellites in view)");
          check_gsv->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* check_gsv
        { check_other = new Fl_Check_Button(18, 216, 460, 16, "Other (When logging sentences)");
          check_other->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* check_other
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(6, 60, 488, 202, "Transmit");
        o->hide();
        { text_trans_ip = new Fl_Input(12, 66, 160, 24, "IP (Target device)");
          text_trans_ip->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Input* text_trans_ip
        { text_trans_port = new Fl_Input(12, 96, 160, 24, "Port");
          text_trans_port->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Input* text_trans_port
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(6, 60, 488, 202, "Receive");
        o->hide();
        { text_recv_ip = new Fl_Input(12, 66, 160, 24, "IP (This device)");
          text_recv_ip->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Input* text_recv_ip
        { text_recv_port = new Fl_Input(12, 96, 160, 24, "Port");
          text_recv_port->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Input* text_recv_port
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(6, 60, 488, 202, "Log");
        o->hide();
        { radio_log_all = new Fl_Round_Button(12, 66, 474, 16, "All (Header, timings and data)");
          radio_log_all->down_box(FL_ROUND_DOWN_BOX);
          radio_log_all->callback((Fl_Callback*)cb_radio_log_all);
        } // Fl_Round_Button* radio_log_all
        { radio_log_short = new Fl_Round_Button(12, 85, 474, 16, "Short (Device ID and data)");
          radio_log_short->down_box(FL_ROUND_DOWN_BOX);
          radio_log_short->value(1);
          radio_log_short->callback((Fl_Callback*)cb_radio_log_short);
        } // Fl_Round_Button* radio_log_short
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(6, 60, 488, 202, "Display");
        o->hide();
        { text_display_utc = new Fl_Output(12, 66, 200, 24, "UTC Timestamp");
          text_display_utc->box(FL_FLAT_BOX);
          text_display_utc->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Output* text_display_utc
        { text_display_lat = new Fl_Output(12, 96, 200, 24, "Latitude");
          text_display_lat->box(FL_FLAT_BOX);
          text_display_lat->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Output* text_display_lat
        { text_display_long = new Fl_Output(12, 126, 200, 24, "Longitude");
          text_display_long->box(FL_FLAT_BOX);
          text_display_long->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Output* text_display_long
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Group* o = new Fl_Group(6, 262, 488, 38);
      { button_apply = new Fl_Button(6, 268, 70, 26, "Apply");
        button_apply->callback((Fl_Callback*)cb_button_apply);
      } // Fl_Button* button_apply
      o->end();
    } // Fl_Group* o
    main_window->end();
  } // Fl_Double_Window* main_window
  load_settings();
}

void MainWindow::show(int argc, char** argv) {
  main_window->show(argc, argv);
}
