// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "ui.h"
#include "gnss_transceiver.h"

void Ui::cb_button_start_i(Fl_Light_Button*, void*) {
  button_start_clicked();
}
void Ui::cb_button_start(Fl_Light_Button* o, void* v) {
  ((Ui*)(o->parent()->parent()->user_data()))->cb_button_start_i(o,v);
}

Fl_Menu_Item Ui::menu_choice_mode[] = {
 {"Transmit", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Receive", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Log", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Ui::cb_button_apply_i(Fl_Button*, void*) {
  button_apply_clicked();
}
void Ui::cb_button_apply(Fl_Button* o, void* v) {
  ((Ui*)(o->parent()->parent()->user_data()))->cb_button_apply_i(o,v);
}

Ui::Ui(gnss::Transceiver* t) {
  transceiver_ = t;
  last_count_ = 0;
  { main_window = new Fl_Double_Window(500, 300, "PiPoint");
    main_window->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(0, 0, 500, 38);
      { button_start = new Fl_Light_Button(122, 6, 60, 26, "Start");
        button_start->selection_color((Fl_Color)62);
        button_start->callback((Fl_Callback*)cb_button_start);
      } // Fl_Light_Button* button_start
      { choice_mode = new Fl_Choice(6, 6, 110, 26);
        choice_mode->down_box(FL_BORDER_BOX);
        choice_mode->labeltype(FL_NO_LABEL);
        choice_mode->menu(menu_choice_mode);
      } // Fl_Choice* choice_mode
      { text_rate = new Fl_Output(254, 6, 60, 26, "Rate (Hz)");
        text_rate->box(FL_FLAT_BOX);
        text_rate->textfont(13);
      } // Fl_Output* text_rate
      { text_total = new Fl_Output(358, 6, 136, 24, "Total");
        text_total->box(FL_FLAT_BOX);
        text_total->textfont(13);
      } // Fl_Output* text_total
      o->end();
    } // Fl_Group* o
    { Fl_Tabs* o = new Fl_Tabs(6, 38, 488, 224);
      { Fl_Group* o = new Fl_Group(6, 60, 488, 202, "Device");
        { text_device_id = new Fl_Input(12, 66, 160, 24, "Device ID");
          text_device_id->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Input* text_device_id
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(6, 60, 488, 202, "GNSS");
        o->hide();
        { text_gnss_port = new Fl_Input(12, 66, 160, 24, "Port (Device sending NMEA sentences)");
          text_gnss_port->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Input* text_gnss_port
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(6, 60, 488, 202, "Transmit");
        o->hide();
        { text_trans_ip = new Fl_Input(12, 66, 160, 24, "IP (Target device)");
          text_trans_ip->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Input* text_trans_ip
        { text_trans_port = new Fl_Input(12, 96, 160, 24, "Port");
          text_trans_port->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Input* text_trans_port
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(6, 60, 488, 202, "Receive");
        o->hide();
        { text_recv_ip = new Fl_Input(12, 66, 160, 24, "IP (This device)");
          text_recv_ip->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Input* text_recv_ip
        { text_recv_port = new Fl_Input(12, 96, 160, 24, "Port");
          text_recv_port->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Input* text_recv_port
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(6, 60, 488, 202, "Log");
        o->hide();
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Group* o = new Fl_Group(6, 262, 488, 38);
      { button_apply = new Fl_Button(6, 268, 70, 26, "Apply");
        button_apply->callback((Fl_Callback*)cb_button_apply);
      } // Fl_Button* button_apply
      o->end();
    } // Fl_Group* o
    main_window->end();
  } // Fl_Double_Window* main_window
  load_settings();
}

void Ui::show(int argc, char** argv) {
  main_window->show(argc, argv);
}
